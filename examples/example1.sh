#!/usr/bin/env bash
# generated by curl-gen (https://github.com/PKopel/curl-gen)
 

function print_usage() {
    echo -e "Usage: $(basename $0) <command> [<options>]
Options:
    -h | --help
            print this message
 
    --dry-run
            display curl command instead of running it
    
    -f | --file <file path>
            use contents of <file path> as call data
 
    --set <paths=values>
            replace fields in data object with provided values, e.g.
            --set '.test=\"asdfgh\"' sets field test of data object
            to value \"asdfgh\"
    
    --path <paths=values>
            replace placeholders in url path with provided values, e.g.
            --path 'test=asdfgh' changes url 'http://localhost/{test}'
            to 'http://localhost/asdfgh'
 "
}

declare -A VALUES
 
# usage: read_values <path> <value>;
function read_values() {
    local FIELD_PATH=$(echo $1 | sed 's/\[/\(/g' - | sed 's/\]/\)/g' - )
    VALUES["$FIELD_PATH"]="$2"
}
 
 

################### auto-generated functions start ###################
    
 
function test_example() {
    local HOST=${ADDRESS:-'localhost:8008'}
    local DATA
    if [[ -n "${FILE_PATH}" ]]; then
        DATA="$(cat ${FILE_PATH})"
    else
        DATA='{
    "obj":'${VALUES[".obj"]:-'{
        "string":'${VALUES[".obj.string"]:-'"data"'}'
    }'}',
    "array":'${VALUES[".array"]:-'[
        '${VALUES[".array(0)"]:-'1.0'}',
        '${VALUES[".array(1)"]:-'null'}'
    ]'}'
}'
    fi
    $CURL -v -k -X PUT \
        "http://$HOST/path" \
        --data "$DATA" \
        --header "Accept: application/json"
}

    
#################### auto-generated functions end ####################
 

CURL=$(which curl)
    
COMMAND=()
THREADS=1
    
while [[ "$#" -gt 0 ]]; do
    OPTION="$1"
    shift
    case $OPTION in
    --dry-run)
        CURL="echo curl"
        ;;
    --help | -h)
        print_usage
        exit 0
        ;;
    --addr | -a)
        ADDRESS="$1"
        shift
        ;;
 
    --file | -f)
       FILE_PATH="$1"
       shift
       ;;
 
    --set | --path)
        while [[ "$1" && ! "$1" == -* ]]; do
            FIELD="$(echo $1 | cut -d= -f1)"
            VALUE="$(echo $1 | cut -d= -f2)"
            read_values "$FIELD" "$VALUE"
            shift
        done
        ;;
    *)
        COMMAND+=("$OPTION")
    esac
done
    
FUNCTION=$( echo "${COMMAND[*]}" | sed 's| |_|g' - )
    
if [ "$(type -t "$FUNCTION")" == "function" ]; then
    $FUNCTION
else
    echo "wrong command: $FUNCTION"
    print_usage
    exit 1
fi
 
