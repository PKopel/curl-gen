{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExtendedDefaultRules #-}

module Bash.Template
  ( script
  ) where

import           RIO                            ( (<>)
                                                , Text
                                                , Bool(..)
                                                )
import           RIO.Text                       ( unlines )
import           Types.Script                   ( ScriptOptions(..) )

header :: Text
header = "#!/usr/bin/env bash\n\
\# generated by curl-gen (https://github.com/PKopel/curl-gen)\n\
\ "

print_usage :: ScriptOptions -> Text
print_usage opts = "\n\
\function print_usage() {\n\
\    echo -e \"Usage: $(basename $0) <command> [<options>]\n\
\Options:\n\
\    -h | --help\n\
\            print this message\n\
\ " <> (if threads opts then thrd else "") <> "\n\
\    --dry-run\n\
\            display curl command instead of running it\n\
\    \n\
\    -f | --file <file path>\n\
\            use contents of <file path> as call data\n\
\ " <> (if random opts then rand else "") <> "\n\
\    --set <paths=values>\n\
\            replace fields in data object with provided values, e.g.\n\
\            --set '.test=\\\"asdfgh\\\"' sets field test of data object\n\
\            to value \\\"asdfgh\\\"\n\
\    \n\
\    --path <paths=values>\n\
\            replace placeholders in url path with provided values, e.g.\n\
\            --path 'test=asdfgh' changes url 'http://localhost/{test}'\n\
\            to 'http://localhost/asdfgh'\n\
\ \"\n\
\}"
  where
    thrd = "\n\
\    -t | --threads <number>\n\
\            run <number> concurrent threads.\n\
\ " :: Text
    rand = "\n\
\    --rand <paths=types>\n\
\            replace fields in data object with random values.\n\
\            Supported types are I for integers and S for strings.\n\
\ " :: Text

read_values :: Text
read_values = "\n\
\# usage: read_values <path> <value>;\n\
\function read_values() {\n\
\    local FIELD_PATH=$(echo $1 | sed 's/\\[/\\(/g' - | sed 's/\\]/\\)/g' - )\n\
\    VALUES[\"$FIELD_PATH\"]=\"$2\"\n\
\}"

generate_values :: Text
generate_values = "\n\
\# usage: generate_values <path> <type>;\n\
\function generate_values() {\n\
\    local FIELD_PATH=$(echo $1 | sed 's/\\[/\\(/g' - | sed 's/\\]/\\)/g' - )\n\
\    local TYPE=$2\n\
\    local GENERATOR\n\
\    if [[ $TYPE == S ]]; then\n\
\        GENERATOR='echo \\\"$(cat /dev/random | tr -dc \"[:alnum:]\" | head -c 20)\\\"'\n\
\    elif [[ $TYPE == I ]]; then\n\
\        GENERATOR='od -vAn -N2 -tu2 < /dev/random'\n\
\    else\n\
\        echo \"wrong type: $TYPE for $FIELD_PATH\"\n\
\    fi\n\
\    VALUES[\"$FIELD_PATH\"]=\"$GENERATOR\"\n\
\}"

values :: Bool -> Text
values rand = "\n\
\declare -A VALUES\n\
\ " <> read_values <> "\n\
\ " <> (if rand then generate_values else "") <> "\n\
\ " 
    

functions :: [Text] -> Text
functions fs = "\n\
\################### auto-generated functions start ###################\n\
\    \n\
\ " <> unlines fs <> "\n\
\    \n\
\#################### auto-generated functions end ####################\n\
\ "

main :: ScriptOptions -> Text
main opts = "\n\
\CURL=$(which curl)\n\
\    \n\
\COMMAND=()\n\
\THREADS=1\n\
\    \n\
\while [[ \"$#\" -gt 0 ]]; do\n\
\    OPTION=\"$1\"\n\
\    shift\n\
\    case $OPTION in\n\
\    --dry-run)\n\
\        CURL=\"echo curl\"\n\
\        ;;\n\
\    --help | -h)\n\
\        print_usage\n\
\        exit 0\n\
\        ;;\n\
\    --addr | -a)\n\
\        ADDRESS=\"$1\"\n\
\        shift\n\
\        ;;\n\
\ " <> (if threads opts then thrd else "") <> "\n\
\    --file | -f)\n\
\       FILE_PATH=\"$1\"\n\
\       shift\n\
\       ;;\n\
\ " <> (if random opts then rand else "") <> "\n\
\    --set | --path)\n\
\        while [[ \"$1\" && ! \"$1\" == -* ]]; do\n\
\            FIELD=\"$(echo $1 | cut -d= -f1)\"\n\
\            VALUE=\"$(echo $1 | cut -d= -f2)\"\n\
\            read_values \"$FIELD\" \"$VALUE\"\n\
\            shift\n\
\        done\n\
\        ;;\n\
\    *)\n\
\        COMMAND+=(\"$OPTION\")\n\
\    esac\n\
\done\n\
\    \n\
\FUNCTION=$( echo \"${COMMAND[*]}\" | sed 's| |_|g' - )\n\
\    \n\
\if [ \"$(type -t \"$FUNCTION\")\" == \"function\" ]; then\n\
\    " <> (if threads opts then loop else "$FUNCTION") <> "\n\
\else\n\
\    echo \"wrong command: $FUNCTION\"\n\
\    print_usage\n\
\    exit 1\n\
\fi\n\
\ "
  where
    thrd = "    --threads | -t)\n\
\        THREADS=\"$1\"\n\
\        shift\n\
\        ;;" :: Text
    rand = "    --rand)\n\
\        while [[ \"$1\" && ! \"$1\" == -* ]]; do\n\
\            FIELD=\"$(echo $1 | cut -d= -f1)\"\n\
\            TYPE=\"$(echo $1 | cut -d= -f2)\"\n\
\            generate_values \"$FIELD\" \"$TYPE\"\n\
\            shift\n\
\        done\n\
\        ;;" :: Text
    loop = "for T in $(seq 1 $THREADS); do\n\
\        $FUNCTION &\n\
\    done" :: Text

script :: ScriptOptions -> [Text] -> Text
script opts fs = unlines 
  [ header
  , print_usage opts
  , values (random opts)
  , functions fs
  , main opts
  ]

