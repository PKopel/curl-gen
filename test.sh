#!/usr/bin/env bash
# generated by curl-gen

SCRIPT_NAME=$(basename $0)
# text colours
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'


# usage: info <message>;
function info() {
    if [ -z $QUIET ]; then
        if [ -t 1 ]; then
            echo -e "${GREEN}[INF]${NC} $1"
        else
            echo -e "[INF] $1"
        fi
    fi
}


# usage: erro <message>;
function erro() {
    if [ -t 1 ]; then
        echo -e "${RED}[ERR]${NC} $1"
    else
        echo -e "[ERR] $1"
    fi
    print_usage
    exit 1
}


function print_usage() {
    echo -e "Usage: $SCRIPT_NAME <command> [-h|--help] [-q|--quiet] [--dry-run] [--set <values>] "
}


declare -A VALUES

# usage: read_values <path> <value> ...;
function read_values() {
    local FIELD_PATH=$(echo $1 | sed 's/\[/\(/g' - | sed 's/\]/\)/g' - )
    while [[ "$#" -gt 0 ]]; do
        VALUES["$FIELD_PATH"]="$2"
        shift
        shift
    done
}


################### auto-generated functions start ###################


function test_put() {
    local HOST=${ADDRESS:-'test.com'}
    local DATA='{
    "obj":'${VALUES[".obj"]:-'{
        "string":'${VALUES[".obj.string"]:-'"data"'}'
    }'}',
    "array":'${VALUES[".array"]:-'[
        '${VALUES[".array(0)"]:-'1.0'}',
        '${VALUES[".array(1)"]:-'null'}'
    ]'}'
}'
    $CURL -k  -v -X  PUT \
        "https://$HOST/${PATH_PARAMS['--path']}" \
        --data "$DATA" \
        --header "Accept: application/json"
}


function test_get() {
    local HOST=${ADDRESS:-'test.com'}
    local DATA=''
    $CURL -k  -v -X  GET \
        "https://$HOST/${PATH_PARAMS['--path']}/${PATH_PARAMS['--id']}" \
     \
        --header "Accept: application/json"
}



#################### auto-generated functions end ####################


CURL=$(which curl)

COMMAND=()
ADDRESS="example.com"
THREADS=1
declare -A PATH_PARAMS

while [[ "$#" -gt 0 ]]; do
    OPTION="$1"
    shift
    case $OPTION in
    --dry-run)
        CURL="echo curl"
        ;;
    --quiet | -q)
        QUIET="true"
        ;;
    --help | -h)
        print_usage
        exit 0
        ;;
    --addr | -a)
        ADDRESS="$1"
        shift
        ;;
    --threads | -t)
        THREADS="$1"
        shift
        ;;
    --set)
        read_values $@
        break
        ;;
    --*)
        PATH_PARAMS["$OPTION"]="$1"
        shift
        ;;
    *)
        COMMAND+=("$OPTION")
    esac
done

FUNCTION=$( echo "${COMMAND[*]}" | sed 's| |_|g' - )

if [ $(type -t "$FUNCTION") == function ]; then
    for T in $(seq 1 $THREADS); do
        $FUNCTION &
    done
fi

